/** Microsoft https://leetcode.com/problems/add-two-numbers/
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode result = new ListNode();
        ListNode tmpNode = result;

        if (l1 == null) { return l2; }
        if (l2 == null) { return l1; }

        int caret = 0;
        while (l1 != null && l2 != null) {
            int curValue = caret + l1.val + l2.val;
            caret = curValue / 10;
            tmpNode.next = new ListNode(curValue % 10);
            tmpNode = tmpNode.next;

            l1 = l1.next;
            l2 = l2.next;
        }

        while (l1 != null) {
            int curValue = caret + l1.val;
            caret = curValue / 10;
            tmpNode.next = new ListNode(curValue % 10);
            tmpNode = tmpNode.next;
            
            l1 = l1.next;
        }

        while (l2 != null) {
            int curValue = caret + l2.val;
            caret = curValue / 10;
            tmpNode.next = new ListNode(curValue % 10);
            tmpNode = tmpNode.next;

            l2 = l2.next;
        }

        if (caret > 0) {
            tmpNode.next = new ListNode(caret);
        }

        result = result.next;
        return result;
    }
}

/* 
** why Node.val <= 9
** 143 + 564 // 14 3 + 546 ??=> result is different
**
** why no leading zeros?
** 1430 5460 => then what's the result? *** or ***0. same but different.

** question:
**  input ListNode
**  output ListNode

** tests:
** 1. [], [] / [1], [] / [], [1]
** 2. [1], [9] -> [0,1]
** 3. [1], [1] -> [2]
** 4. [1, 2], [7] -> [8, 2]
** 6. [0, 0, 1], [1] -> [1, 0, 1]

** summary:
** don't forget caret, don't forget l1 or l2 is not empty, use 3 while loop.
** might need to add result = result.next. then return result, in case memory leak.
** but only single o(1). If this method get called 100000 times?
*/
